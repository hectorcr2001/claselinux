{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "problema1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "mount_file_id": "1MDgk18i2n1wduLjC1gLrcSkMwOBC9E4I",
      "authorship_tag": "ABX9TyN1D+56lGKTN8uk0jpN6XFa",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/hectorcr2001/claselinux/blob/main/problema1.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "def reescalarpos(x):\n",
        "  return x**1.496*10**(11)\n",
        "\n",
        "\n",
        "def modulo(x,y):\n",
        "  return math.sqrt(x*x+y*y)"
      ],
      "metadata": {
        "id": "YO0qoN0CIy_Q"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 341
        },
        "id": "oz-Ft7DxtCzq",
        "outputId": "2f6a46ee-b471-4516-926a-c14da0c29587"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Prefiere un punto de vista heliocentrista o geocentrista (escriba h o g)\n",
            "g\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:86: RuntimeWarning: invalid value encountered in double_scalars\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "from re import X\n",
        "from numpy.lib.twodim_base import mask_indices\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import math\n",
        "\n",
        "\n",
        "# valores iniciales\n",
        "n=10000 #numero de iteraciones\n",
        "m=10 #numero de planetas\n",
        "h=0.1 #paso en el tiempo\n",
        "\n",
        "#inicializar las variables para el algoritmo (las de los ficheros ya están reescaladas)\n",
        "t=0\n",
        "ma=np.genfromtxt(\"/content/drive/MyDrive/Uni/Compu/masas.txt\") #masa\n",
        "rx=np.genfromtxt(\"/content/drive/MyDrive/Uni/Compu/distancias.txt\") #distancia al sol\n",
        "ry=np.zeros(m)\n",
        "vx=np.zeros(m)\n",
        "vy=np.genfromtxt(\"/content/drive/MyDrive/Uni/Compu/velocidad.txt\") #velocidad\n",
        "ax=np.zeros(m) #aceleracion\n",
        "ay=np.zeros(m)\n",
        "wx=np.zeros(m) #variable que se define en el algoritmo\n",
        "wy=np.zeros(m)\n",
        "\n",
        "#inicializar las variables para la comprobación de los periodos\n",
        "pt=np.genfromtxt(\"/content/drive/MyDrive/Uni/Compu/periodos.txt\")*365\n",
        "ps=np.zeros(m-1)\n",
        "psuma=np.zeros(m-1)\n",
        "cont=np.zeros(m-1)\n",
        "rya=np.zeros(m)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "print(\"Prefiere un punto de vista heliocentrista o geocentrista (escriba h o g)\")\n",
        "ref=input()\n",
        "if (ref==\"g\"):\n",
        "  rx=rx-1\n",
        "\n",
        "\n",
        "\n",
        "f = open(\"planets_data.txt\", \"w\")\n",
        "g= open(\"result_periodos.txt\",\"w\")\n",
        "#calcula las aceleraciones iniciales\n",
        "for i in range(m):\n",
        "    for j in range(m):\n",
        "      if (i != j):\n",
        "        ax[i]=ax[i]-ma[j]*(rx[i]-rx[j])/(modulo(rx[i]-rx[j],ry[i]-ry[j]))**3\n",
        "        ay[i]=ay[i]-ma[j]*(ry[i]-ry[j])/(modulo(rx[i]-rx[j],ry[i]-ry[j]))**3\n",
        "    #print(\"ax= \", ax[i], \"ay= \", ay[i])\n",
        "#recorre el algoritmo n veces\n",
        "for k in range(n):\n",
        "  for i in range(m):\n",
        "    rya[i]=ry[i]\n",
        "    rx[i]=rx[i]+h*vx[i]+(h*h*0.5)*ax[i]\n",
        "    ry[i]=ry[i]+h*vy[i]+(h*h*0.5)*ay[i]\n",
        "    wx[i]=vx[i]+(h*0.5)*ax[i]\n",
        "    wy[i]=vy[i]+(h*0.5)*ay[i]\n",
        "\n",
        "    \n",
        "    print(rx[i], \",\",ry[i], file=f) #escribe las posiciones en un archivo\n",
        "\n",
        "  print(\"\", file=f)\n",
        "  ax=np.zeros(m)\n",
        "  ay=np.zeros(m) \n",
        "  for i in range(m):\n",
        "    for j in range(m):\n",
        "      if (i != j):\n",
        "        ax[i]=ax[i]-ma[j]*(rx[i]-rx[j])/(modulo(rx[i]-rx[j],ry[i]-ry[j]))**3\n",
        "        ay[i]=ay[i]-ma[j]*(ry[i]-ry[j])/(modulo(rx[i]-rx[j],ry[i]-ry[j]))**3\n",
        "  for i in range(m):\n",
        "    vx[i]=wx[i]+(h*0.5)*(ax[i])\n",
        "    vy[i]=wy[i]+(h*0.5)*(ay[i])\n",
        "  \n",
        "  t=t+h\n",
        "\n",
        "  #comprobación periodos\n",
        "  for i in range(m-1):\n",
        "    if (rya[i+1]<0 & 0<ry[i+1]):\n",
        "      cont[i]=cont[i]+1\n",
        "      psuma[i]=psuma[i]+ps[i]\n",
        "      ps[i]=t-psuma[i]\n",
        "\n",
        "for i in range(m-1):\n",
        "  print(i,\" periodo medio\", psuma[i]/(cont[i]*24*3600*1.99*(10**(-7))),\"\\n\",\"periodo real: \",pt[i],\"\\n\", \"proporción: \",psuma[i]/(cont[i]*pt[i]*24*3600*1.99*(10**(-7))),\"\\n\",file=g)\n",
        "\n",
        "f.close()\n",
        "g.close()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dn7KO9S6c4Hy"
      },
      "outputs": [],
      "source": [
        "# ================================================================================\n",
        "# ANIMACION SISTEMA SOLAR\n",
        "#\n",
        "# Genera una animación a partir de un fichero de datos con las posiciones\n",
        "# de los planetas en diferentes instantes de tiempo.\n",
        "# \n",
        "# El fichero debe estructurarse de la siguiente forma:\n",
        "# \n",
        "#   x1_1, y1_1\n",
        "#   x2_1, y2_1\n",
        "#   x3_1, y3_1\n",
        "#   (...)\n",
        "#   xN_1, yN_1\n",
        "#   \n",
        "#   x1_2, y1_2\n",
        "#   x2_2, y2_2\n",
        "#   x3_2, y3_2\n",
        "#   (...)\n",
        "#   xN_2, yN_2\n",
        "#\n",
        "#   x1_3, y1_3\n",
        "#   x2_3, y2_3\n",
        "#   x3_3, y3_3\n",
        "#   (...)\n",
        "#   xN_3, yN_3\n",
        "#   \n",
        "#   (...)\n",
        "#\n",
        "# donde xi_j es la componente x del planeta i-ésimo en el instante de\n",
        "# tiempo j-ésimo, e yi_j lo mismo en la componente y. El programa asume que\n",
        "# el nº de planetas es siempre el mismo.\n",
        "# ¡OJO! Los datos están separados por comas.\n",
        "# \n",
        "# Si solo se especifica un instante de tiempo, se genera una imagen en pdf\n",
        "# en lugar de una animación\n",
        "#\n",
        "# Se puede configurar la animación cambiando el valor de las variables\n",
        "# de la sección \"Parámetros\"\n",
        "#\n",
        "# ================================================================================\n",
        "\n",
        "# Importa los módulos necesarios\n",
        "from matplotlib import pyplot as plt\n",
        "from matplotlib.animation import FuncAnimation\n",
        "from matplotlib.patches import Circle\n",
        "import numpy as np\n",
        "\n",
        "# Parámetros\n",
        "# ========================================\n",
        "file_in = \"planets_data.txt\" # Nombre del fichero de datos\n",
        "file_out = \"planetas\" # Nombre del fichero de salida (sin extensión)\n",
        "\n",
        "# Límites de los ejes X e Y\n",
        "x_min = -5\n",
        "x_max = 5\n",
        "y_min = -5\n",
        "y_max = 5\n",
        "\n",
        "interval = 100 # Tiempo entre fotogramas en milisegundos\n",
        "show_trail = True # Muestra la \"estela\" del planeta\n",
        "trail_width = 1 # Ancho de la estela\n",
        "save_to_file = True # False: muestra la animación por pantalla,\n",
        "                     # True: la guarda en un fichero\n",
        "dpi = 150 # Calidad del vídeo de salida (dots per inch)\n",
        "\n",
        "# Radio del planeta, en las mismas unidades que la posición\n",
        "# Puede ser un número (el radio de todos los planetas) o una lista con\n",
        "# el radio de cada uno\n",
        "planet_radius = 0.3\n",
        "#planet_radius = [0.5, 0.7, 1.1]\n",
        "\n",
        "\n",
        "# Lectura del fichero de datos\n",
        "# ========================================\n",
        "# Lee el fichero a una cadena de texto\n",
        "with open(file_in, \"r\") as f:\n",
        "    data_str = f.read()\n",
        "\n",
        "# Inicializa la lista con los datos de cada fotograma.\n",
        "# frames_data[j] contiene los datos del fotograma j-ésimo\n",
        "frames_data = list()\n",
        "\n",
        "# Itera sobre los bloques de texto separados por líneas vacías\n",
        "# (cada bloque corresponde a un instante de tiempo)\n",
        "for frame_data_str in data_str.split(\"\\n\\n\"):\n",
        "    # Inicializa la lista con la posición de cada planeta\n",
        "    frame_data = list()\n",
        "\n",
        "    # Itera sobre las líneas del bloque\n",
        "    # (cada línea da la posición de un planta)\n",
        "    for planet_pos_str in frame_data_str.split(\"\\n\"):\n",
        "        # Lee la componente x e y de la línea\n",
        "        planet_pos = np.fromstring(planet_pos_str, sep=\",\")\n",
        "        # Si la línea no está vacía, añade planet_pos a la lista de \n",
        "        # posiciones del fotograma\n",
        "        if planet_pos.size > 0:\n",
        "            frame_data.append(np.fromstring(planet_pos_str, sep=\",\"))\n",
        "\n",
        "    # Añade los datos de este fotograma a la lista\n",
        "    frames_data.append(frame_data)\n",
        "\n",
        "# El número de planetas es el número de líneas en cada bloque\n",
        "# Lo calculamos del primer bloque\n",
        "nplanets = len(frames_data[0])\n",
        "\n",
        "\n",
        "# Creación de la animación/gráfico\n",
        "# ========================================\n",
        "# Crea los objetos figure y axis\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "# Define el rango de los ejes\n",
        "ax.axis(\"equal\")  # Misma escala para ejes X e Y\n",
        "ax.set_xlim(x_min, x_max)\n",
        "ax.set_ylim(y_min, y_max)\n",
        "\n",
        "# Si solo se ha dado un radio para todos los planetas, conviértelo a una\n",
        "# lista con todos los elementos iguales\n",
        "if not hasattr(planet_radius, \"__iter__\"):\n",
        "    planet_radius = planet_radius*np.ones(nplanets)\n",
        "# En caso contrario, comprueba que el nº de radios coincide con el\n",
        "# nº de planetas y devuelve error en caso contrario\n",
        "else:\n",
        "    if not nplanets == len(planet_radius):\n",
        "        raise ValueError(\n",
        "                \"El número de radios especificados no coincide con el número \"\n",
        "                \"de planetas\")\n",
        "\n",
        "# Representa el primer fotograma\n",
        "# Pinta un punto en la posición de cada paneta y guarda el objeto asociado\n",
        "# al punto en una lista\n",
        "planet_points = list()\n",
        "planet_trails = list()\n",
        "for planet_pos, radius in zip(frames_data[0], planet_radius):\n",
        "    x, y = planet_pos\n",
        "    #planet_point, = ax.plot(x, y, \"o\", markersize=10)\n",
        "    planet_point = Circle((x, y), radius)\n",
        "    ax.add_artist(planet_point)\n",
        "    planet_points.append(planet_point)\n",
        "\n",
        "    # Inicializa las estelas (si especificado en los parámetros)\n",
        "    if show_trail:\n",
        "        planet_trail, = ax.plot(\n",
        "                x, y, \"-\", linewidth=trail_width,\n",
        "                color=planet_points[-1].get_facecolor())\n",
        "        planet_trails.append(planet_trail)\n",
        " \n",
        "# Función que actualiza la posición de los planetas en la animación \n",
        "def update(j_frame, frames_data, planet_points, planet_trails, show_trail):\n",
        "    # Actualiza la posición del correspondiente a cada planeta\n",
        "    for j_planet, planet_pos in enumerate(frames_data[j_frame]):\n",
        "        x, y = planet_pos\n",
        "        planet_points[j_planet].center = (x, y)\n",
        "\n",
        "        if show_trail:\n",
        "            xs_old, ys_old = planet_trails[j_planet].get_data()\n",
        "            xs_new = np.append(xs_old, x)\n",
        "            ys_new = np.append(ys_old, y)\n",
        "\n",
        "            planet_trails[j_planet].set_data(xs_new, ys_new)\n",
        "\n",
        "    return planet_points + planet_trails\n",
        "\n",
        "def init_anim():\n",
        "    # Clear trails\n",
        "    if show_trail:\n",
        "        for j_planet in range(nplanets):\n",
        "            planet_trails[j_planet].set_data(list(), list())\n",
        "\n",
        "    return planet_points + planet_trails\n",
        "\n",
        "# Calcula el nº de frames\n",
        "nframes = len(frames_data)\n",
        "\n",
        "# Si hay más de un instante de tiempo, genera la animación\n",
        "if nframes > 1:\n",
        "    # Info sobre FuncAnimation: https://matplotlib.org/stable/api/animation_api.html\n",
        "    animation = FuncAnimation(\n",
        "            fig, update, init_func=init_anim,\n",
        "            fargs=(frames_data, planet_points, planet_trails, show_trail),\n",
        "            frames=len(frames_data), blit=True, interval=interval)\n",
        "\n",
        "    # Muestra por pantalla o guarda según parámetros\n",
        "    if save_to_file:\n",
        "        animation.save(\"{}.mp4\".format(file_out), dpi=dpi)\n",
        "    else:\n",
        "        plt.show()\n",
        "# En caso contrario, muestra o guarda una imagen\n",
        "else:\n",
        "    # Muestra por pantalla o guarda según parámetros\n",
        "    if save_to_file:\n",
        "        fig.savefig(\"{}.pdf\".format(file_out))\n",
        "    else:\n",
        "        plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "HKgESs8zksd0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "4c7bedb4-e76e-4f58-da13-8144e1fd3c97",
        "id": "cDOk_7WkX17u"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# ================================================================================\n",
        "# ANIMACION SISTEMA SOLAR\n",
        "#\n",
        "# Genera una animación a partir de un fichero de datos con las posiciones\n",
        "# de los planetas en diferentes instantes de tiempo.\n",
        "# \n",
        "# El fichero debe estructurarse de la siguiente forma:\n",
        "# \n",
        "#   x1_1, y1_1\n",
        "#   x2_1, y2_1\n",
        "#   x3_1, y3_1\n",
        "#   (...)\n",
        "#   xN_1, yN_1\n",
        "#   \n",
        "#   x1_2, y1_2\n",
        "#   x2_2, y2_2\n",
        "#   x3_2, y3_2\n",
        "#   (...)\n",
        "#   xN_2, yN_2\n",
        "#\n",
        "#   x1_3, y1_3\n",
        "#   x2_3, y2_3\n",
        "#   x3_3, y3_3\n",
        "#   (...)\n",
        "#   xN_3, yN_3\n",
        "#   \n",
        "#   (...)\n",
        "#\n",
        "# donde xi_j es la componente x del planeta i-ésimo en el instante de\n",
        "# tiempo j-ésimo, e yi_j lo mismo en la componente y. El programa asume que\n",
        "# el nº de planetas es siempre el mismo.\n",
        "# ¡OJO! Los datos están separados por comas.\n",
        "# \n",
        "# Si solo se especifica un instante de tiempo, se genera una imagen en pdf\n",
        "# en lugar de una animación\n",
        "#\n",
        "# Se puede configurar la animación cambiando el valor de las variables\n",
        "# de la sección \"Parámetros\"\n",
        "#\n",
        "# ================================================================================\n",
        "\n",
        "# Importa los módulos necesarios\n",
        "from matplotlib import pyplot as plt\n",
        "from matplotlib.animation import FuncAnimation\n",
        "from matplotlib.patches import Circle\n",
        "import numpy as np\n",
        "\n",
        "# Parámetros\n",
        "# ========================================\n",
        "file_in = \"planets_data.txt\" # Nombre del fichero de datos\n",
        "file_out = \"planetas_lejos\" # Nombre del fichero de salida (sin extensión)\n",
        "\n",
        "# Límites de los ejes X e Y\n",
        "x_min = -30\n",
        "x_max = 30\n",
        "y_min = -30\n",
        "y_max = 30\n",
        "\n",
        "interval = 100 # Tiempo entre fotogramas en milisegundos\n",
        "show_trail = True # Muestra la \"estela\" del planeta\n",
        "trail_width = 1 # Ancho de la estela\n",
        "save_to_file = True # False: muestra la animación por pantalla,\n",
        "                     # True: la guarda en un fichero\n",
        "dpi = 150 # Calidad del vídeo de salida (dots per inch)\n",
        "\n",
        "# Radio del planeta, en las mismas unidades que la posición\n",
        "# Puede ser un número (el radio de todos los planetas) o una lista con\n",
        "# el radio de cada uno\n",
        "planet_radius = 0.3\n",
        "#planet_radius = [0.5, 0.7, 1.1]\n",
        "\n",
        "\n",
        "# Lectura del fichero de datos\n",
        "# ========================================\n",
        "# Lee el fichero a una cadena de texto\n",
        "with open(file_in, \"r\") as f:\n",
        "    data_str = f.read()\n",
        "\n",
        "# Inicializa la lista con los datos de cada fotograma.\n",
        "# frames_data[j] contiene los datos del fotograma j-ésimo\n",
        "frames_data = list()\n",
        "\n",
        "# Itera sobre los bloques de texto separados por líneas vacías\n",
        "# (cada bloque corresponde a un instante de tiempo)\n",
        "for frame_data_str in data_str.split(\"\\n\\n\"):\n",
        "    # Inicializa la lista con la posición de cada planeta\n",
        "    frame_data = list()\n",
        "\n",
        "    # Itera sobre las líneas del bloque\n",
        "    # (cada línea da la posición de un planta)\n",
        "    for planet_pos_str in frame_data_str.split(\"\\n\"):\n",
        "        # Lee la componente x e y de la línea\n",
        "        planet_pos = np.fromstring(planet_pos_str, sep=\",\")\n",
        "        # Si la línea no está vacía, añade planet_pos a la lista de \n",
        "        # posiciones del fotograma\n",
        "        if planet_pos.size > 0:\n",
        "            frame_data.append(np.fromstring(planet_pos_str, sep=\",\"))\n",
        "\n",
        "    # Añade los datos de este fotograma a la lista\n",
        "    frames_data.append(frame_data)\n",
        "\n",
        "# El número de planetas es el número de líneas en cada bloque\n",
        "# Lo calculamos del primer bloque\n",
        "nplanets = len(frames_data[0])\n",
        "\n",
        "\n",
        "# Creación de la animación/gráfico\n",
        "# ========================================\n",
        "# Crea los objetos figure y axis\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "# Define el rango de los ejes\n",
        "ax.axis(\"equal\")  # Misma escala para ejes X e Y\n",
        "ax.set_xlim(x_min, x_max)\n",
        "ax.set_ylim(y_min, y_max)\n",
        "\n",
        "# Si solo se ha dado un radio para todos los planetas, conviértelo a una\n",
        "# lista con todos los elementos iguales\n",
        "if not hasattr(planet_radius, \"__iter__\"):\n",
        "    planet_radius = planet_radius*np.ones(nplanets)\n",
        "# En caso contrario, comprueba que el nº de radios coincide con el\n",
        "# nº de planetas y devuelve error en caso contrario\n",
        "else:\n",
        "    if not nplanets == len(planet_radius):\n",
        "        raise ValueError(\n",
        "                \"El número de radios especificados no coincide con el número \"\n",
        "                \"de planetas\")\n",
        "\n",
        "# Representa el primer fotograma\n",
        "# Pinta un punto en la posición de cada paneta y guarda el objeto asociado\n",
        "# al punto en una lista\n",
        "planet_points = list()\n",
        "planet_trails = list()\n",
        "for planet_pos, radius in zip(frames_data[0], planet_radius):\n",
        "    x, y = planet_pos\n",
        "    #planet_point, = ax.plot(x, y, \"o\", markersize=10)\n",
        "    planet_point = Circle((x, y), radius)\n",
        "    ax.add_artist(planet_point)\n",
        "    planet_points.append(planet_point)\n",
        "\n",
        "    # Inicializa las estelas (si especificado en los parámetros)\n",
        "    if show_trail:\n",
        "        planet_trail, = ax.plot(\n",
        "                x, y, \"-\", linewidth=trail_width,\n",
        "                color=planet_points[-1].get_facecolor())\n",
        "        planet_trails.append(planet_trail)\n",
        " \n",
        "# Función que actualiza la posición de los planetas en la animación \n",
        "def update(j_frame, frames_data, planet_points, planet_trails, show_trail):\n",
        "    # Actualiza la posición del correspondiente a cada planeta\n",
        "    for j_planet, planet_pos in enumerate(frames_data[j_frame]):\n",
        "        x, y = planet_pos\n",
        "        planet_points[j_planet].center = (x, y)\n",
        "\n",
        "        if show_trail:\n",
        "            xs_old, ys_old = planet_trails[j_planet].get_data()\n",
        "            xs_new = np.append(xs_old, x)\n",
        "            ys_new = np.append(ys_old, y)\n",
        "\n",
        "            planet_trails[j_planet].set_data(xs_new, ys_new)\n",
        "\n",
        "    return planet_points + planet_trails\n",
        "\n",
        "def init_anim():\n",
        "    # Clear trails\n",
        "    if show_trail:\n",
        "        for j_planet in range(nplanets):\n",
        "            planet_trails[j_planet].set_data(list(), list())\n",
        "\n",
        "    return planet_points + planet_trails\n",
        "\n",
        "# Calcula el nº de frames\n",
        "nframes = len(frames_data)\n",
        "\n",
        "# Si hay más de un instante de tiempo, genera la animación\n",
        "if nframes > 1:\n",
        "    # Info sobre FuncAnimation: https://matplotlib.org/stable/api/animation_api.html\n",
        "    animation = FuncAnimation(\n",
        "            fig, update, init_func=init_anim,\n",
        "            fargs=(frames_data, planet_points, planet_trails, show_trail),\n",
        "            frames=len(frames_data), blit=True, interval=interval)\n",
        "\n",
        "    # Muestra por pantalla o guarda según parámetros\n",
        "    if save_to_file:\n",
        "        animation.save(\"{}.mp4\".format(file_out), dpi=dpi)\n",
        "    else:\n",
        "        plt.show()\n",
        "# En caso contrario, muestra o guarda una imagen\n",
        "else:\n",
        "    # Muestra por pantalla o guarda según parámetros\n",
        "    if save_to_file:\n",
        "        fig.savefig(\"{}.pdf\".format(file_out))\n",
        "    else:\n",
        "        plt.show()"
      ]
    }
  ]
}